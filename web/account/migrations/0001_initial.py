# Generated by Django 4.1.2 on 2025-01-27 15:42

import account.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("student", "student"),
                            ("oc", "oc"),
                            ("admin", "admin"),
                            ("instructor", "instructor"),
                            ("vip", "vip"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("nick_name", models.CharField(blank=True, max_length=100, null=True)),
                ("mobile", models.IntegerField(blank=True, null=True)),
                ("school", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "encrypted_id",
                    models.CharField(
                        default=account.models.generate_encrypted_string, max_length=32
                    ),
                ),
                ("school_code", models.CharField(blank=True, max_length=2, null=True)),
                (
                    "best_booth",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("G1 銀行", "G1 銀行"),
                            ("G2 監獄", "G2 監獄"),
                            ("G3 醫院", "G3 醫院"),
                            ("G4 公園", "G4 公園"),
                            ("G5 稅局", "G5 稅局"),
                            ("G6 法院", "G6 法院"),
                            ("G7 警局", "G7 警局"),
                            ("G8 社署", "G8 社署"),
                            ("S1 小學及中學", "S1 小學及中學"),
                            ("S2 大學", "S2 大學"),
                            ("S3 身心靈學院", "S3 身心靈學院"),
                            ("W1 職業培訓中心", "W1 職業培訓中心"),
                            ("W2 報館", "W2 報館"),
                            ("W3 健身室", "W3 健身室"),
                            ("W4 語言中心", "W4 語言中心"),
                            ("W5 物理治療診所", "W5 物理治療診所"),
                            ("W6 律師樓", "W6 律師樓"),
                            ("W7 酒店", "W7 酒店"),
                            ("W8 幼兒中心", "W8 幼兒中心"),
                            ("W9 航空公司", "W9 航空公司"),
                            ("C1 黑社會", "C1 黑社會"),
                            ("C2 股票交易所", "C2 股票交易所"),
                            ("C3 虛擬貨幣交易所", "C3 虛擬貨幣交易所"),
                            ("C4 地產公司", "C4 地產公司"),
                            ("C5 選舉投票站", "C5 選舉投票站"),
                            ("C6 社區中心", "C6 社區中心"),
                            ("C7 信貸公司", "C7 信貸公司"),
                            ("C8 創業中心", "C8 創業中心"),
                            ("C9 保險公司", "C9 保險公司"),
                            ("E1 賭場", "E1 賭場"),
                            ("E2 酒吧", "E2 酒吧"),
                            ("E3 卡拉OK", "E3 卡拉OK"),
                            ("E4 兼職情人", "E4 兼職情人"),
                            ("R1 婚姻註冊處", "R1 婚姻註冊處"),
                            ("R2 家庭", "R2 家庭"),
                            ("R3 友情", "R3 友情"),
                            ("R4 生死教育", "R4 生死教育"),
                            ("R5 交友app", "R5 交友app"),
                            ("R6 情緒教育", "R6 情緒教育"),
                            ("R7 一夜情", "R7 一夜情"),
                            ("A1 義工", "A1 義工"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                ("room_no", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"ordering": ["id"],},
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="InstructorGroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "instructor",
                    models.ManyToManyField(
                        related_name="instructor", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        related_name="student", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
    ]
